<?xml version="1.0"?>
<!--
  Copyright 2002, 2005 The Apache Software Foundation.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  
-->
<!-- ====================================================================== 
     18.11.2005 12:01:30                                                        

     log4js    
     Logging library for JavaScript which is using almost same API than log4j.
	 
	 Log4js-servlet is the servlet to store clients loggs on server.
                   
     Stephan Strittmatter                                                               
     ====================================================================== -->
<project name="log4js-servlet" default="install" basedir=".">
	<description>
	  	ANT build file for Log4js-servlet.
		Log4js-servlet is the servlet to store clients loggs on server.
	</description>

	<!-- The build.properties file defines the parth to local jar files -->
	<property file="build.properties" />

	<property environment="env" />


	<property name="src.dir" value="src/main" />
	<property name="lib.dir" value="lib" />
	<property name="doc.dir" value="docs" />
	<property name="dist.dir" value="target" />

	<property name="log4js-core.dir" value="../log4js" />

	<property name="dist.docs.dir" value="${dist.dir}/docs" />
	<property name="dist.reports.dir" value="${dist.dir}/reports" />

	<!-- unit tests -->
	<property name="src.test.dir" value="src/test" />
	<property name="src.test.java.dir" value="${src.test.dir}/java" />
	<property name="classes.java.dir" value="${dist.dir}/classes" />
	<property name="classes.test.java.dir" value="${dist.dir}/test-classes" />

	<property name="web.xml" value="${src.dir}/webapp/WEB-INF/web.xml" />


	<!-- release properties -->
	<property name="release.dir" value="../release" />


	<!-- ================================= 
          target: release              
         ================================= -->
	<target name="release" depends="dist, install" description="--> create release">
		<echo>generate distribution archives</echo>

		<mkdir dir="${release.dir}" />

		<copy todir="${release.dir}/">

			<fileset file="${dist.dir}/*.war" >

			</fileset>
		</copy>

	

	</target>

	<!-- ================================= 
          target: distribute              
         ================================= -->
	<target name="dist" depends="dist.api, dist.doc" description="--> generate complete distribution">

	</target>


	<!-- ================================= 
          target: dist.api              
         ================================= -->
	<target name="dist.api" depends="init, compile" description="--> distribution archive for API">

	</target>

	<!-- ================================= 
          target: dist.doc              
         ================================= -->
	<target name="dist.doc" depends="init" description="--> Generate API documentation">

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: compile                      
         - - - - - - - - - - - - - - - - - -->
	<target name="compile" depends="init">
		<mkdir dir="${classes.java.dir}" />

		<javac srcdir="${src.dir}" destdir="${classes.java.dir}" debug="on">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- ================================= 
          target: install              
         ================================= -->
	<target name="install" depends="init, compile" description="--> Create the WAR">

		<property name="webapp.dir" value="${dist.dir}/webapp" />

		<delete file="${dist.dir}/${ant.project.name}.war" failonerror="false" />

		<delete dir="${webapp.dir}" />

		<mkdir dir="${webapp.dir}" />
		<copy todir="${webapp.dir}" overwrite="true">
			<fileset dir="${src.dir}/webapp">
				<exclude name="**/*.bak" />
			</fileset>
		</copy>


		<copy todir="${webapp.dir}" overwrite="true">
			<fileset dir="${log4js-core.dir}/src/main/webapp">
				<exclude name="**/*.bak" />
				<exclude name="**/WEB-INF" />
			</fileset>
		</copy>
		
		<mkdir dir="${webapp.dir}/js" />
		<copy todir="${webapp.dir}/js" overwrite="true">
			<fileset dir="${log4js-core.dir}/src/main/js">
				<exclude name="**/*.bak" />
			</fileset>
			<fileset dir="${log4js-core.dir}/lib">
				<include name="**/json.js" />
			</fileset>			
		</copy>
		
		<mkdir dir="${webapp.dir}/WEB-INF/classes" />
		<copy todir="${webapp.dir}/WEB-INF/classes" overwrite="true">
			<fileset dir="${src.dir}/resources">
				<exclude name="**/web.xml" />
				<exclude name="**/*.bak" />
			</fileset>
		</copy>
		<copy todir="${webapp.dir}/WEB-INF/classes" overwrite="true">
			<fileset dir="${classes.java.dir}">
				<exclude name="**/web.xml" />
				<exclude name="**/*.bak" />
			</fileset>
		</copy>

		<mkdir dir="${webapp.dir}/WEB-INF/lib" />
		<copy todir="${webapp.dir}/WEB-INF/lib" overwrite="true">
			<fileset dir="${lib.dir}">
				<exclude name="servlet-api*.jar" />
			</fileset>
		</copy>

		<war destfile="${dist.dir}/${ant.project.name}.war" webxml="${web.xml}">
			<fileset dir="${webapp.dir}">
				<exclude name="**/web.xml" />
				<exclude name="**/*.bak" />
				<exclude name="**/servlet-api*.jar" />
			</fileset>
		</war>
	</target>

	<!-- ================================= 
          target: doc.api              
         ================================= -->
	<target name="doc.api" description="generate the API doc" depends="init">

	</target>



	<!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="init">
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: download-dependencies                      
         - - - - - - - - - - - - - - - - - -->
	<target name="download-dependencies" depends="init">

		<description>
	          To use this Maven-like freedom with respect to dependency setup,
	          do the following:

	          - run ant as you normally would, but add the following target to the command
	            line:

	            download-dependencies

	          For example:
	             C:>myproject\ant download-dependencies dist
		</description>

		<setproxy proxyhost="proxy" proxyport="80" />
		<property name="maven2.server" value="http://www.ibiblio.org/maven"/>
		
		<!-- required libs -->
		<property name="junit.jar" value="${lib.dir}/junit-${tools.junit.version}.jar" />
		<property name="log4j.jar" value="${lib.dir}/log4j-${tools.log4j.version}.jar" />
		<property name="servlet-api.jar" value="${lib.dir}/servlet-api-${tools.servlet-api.version}.jar" />
		<property name="json-lib.jar" value="${lib.dir}/json-lib-${tools.json-lib.version}.jar" />
		<property name="commons-beanutils.jar" value="${lib.dir}/commons-beanutils-${tools.commons-beanutils.version}.jar" />
		<property name="commons-collections.jar" value="${lib.dir}/commons-collections-${tools.commons-collections.version}.jar" />
		<property name="commons-logging.jar" value="${lib.dir}/commons-logging-${tools.commons-logging.version}.jar" />
		<property name="commons-lang.jar" value="${lib.dir}/commons-logging-${tools.commons-lang.version}.jar" />
		<property name="ezmorph.jar" value="${lib.dir}/ezmorph-${tools.ezmorph.version}.jar" />
		
			
		<get dest="${junit.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/junit/jars/junit-${tools.junit.version}.jar" verbose="true" />
		<get dest="${log4j.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/log4j/jars/log4j-${tools.log4j.version}.jar" verbose="true" />
		<get dest="${servlet-api.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/javax.servlet/jars/servlet-api-${tools.servlet-api.version}.jar" verbose="true" />

		<get dest="${json-lib.jar}" usetimestamp="true" ignoreerrors="true" src="http://downloads.sourceforge.net/json-lib/json-lib-${tools.json-lib.version}.jar" verbose="true" />
		<!--<get dest="${json-lib.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/net.sf.json-lib/jars/json-lib-${tools.json-lib.version}.jar" verbose="true" />-->
		<get dest="${commons-beanutils.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/commons-beanutils/jars/commons-beanutils-${tools.commons-beanutils.version}.jar" verbose="true" />
		<get dest="${commons-collections.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/commons-beanutils/jars/commons-collections-${tools.commons-collections.version}.jar" verbose="true" />
		<get dest="${commons-logging.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/commons-logging/jars/commons-logging-${tools.commons-logging.version}.jar" verbose="true" />
		<get dest="${commons-lang.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/commons-logging/jars/commons-lang-${tools.commons-lang.version}.jar" verbose="true" />
		<get dest="${ezmorph.jar}" usetimestamp="true" ignoreerrors="true" src="${maven2.server}/net.sf.ezmorph/jars/ezmorph-${tools.ezmorph.version}.jar" verbose="true" />
	</target>


	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="--> clean all the generated files">
		<delete dir="${dist.dir}" />
	</target>


	<!-- ================================= 
          target: compile.test              
         ================================= -->
	<target name="compile.test" depends="init" description="--> compiles test clases">
		<mkdir dir="${classes.test.java.dir}" />
		<javac srcdir="${src.test.java.dir}" destdir="${classes.test.java.dir}">
			<classpath>
				<pathelement path="${classes.java.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- ================================= 
          target: test              
         ================================= -->
	<target name="test" depends="compile, compile.test" description="--> Unit tests">
		<mkdir dir="${dist.reports.dir}" />

		<junit printsummary="yes">
			<classpath>
				<pathelement location="${dist.dir}" />
				<pathelement path="${classes.java.dir}" />
				<pathelement path="${classes.test.java.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<formatter type="xml" />

			<batchtest todir="${dist.reports.dir}">
				<fileset dir="${src.test.java.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- Create html output from the reports -->
		<junitreport todir="${dist.reports.dir}">
			<fileset dir="${dist.reports.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${dist.reports.dir}" />
		</junitreport>
	</target>


</project>