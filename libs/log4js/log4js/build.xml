<?xml version="1.0"?>
<!--
  Copyright 2002, 2005 The Apache Software Foundation.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  
-->
<!-- ====================================================================== 
     18.11.2005 12:01:30                                                        

     log4js    
     Logging library for JavaScript which is using almost same API than log4j
                   
     Stephan Strittmatter                                                               
     ====================================================================== -->
<project name="Log4js" default="dist" basedir=".">
	<description>
	  	ANT build file for Log4js, the logging library for JavaScript which is 
		using almost same API than log4j.
	</description>
	<!-- The build.properties file defines the parth to local jar files -->
	<property file="build.properties" />
	<property environment="env" />

	<property name="version" value="${version}" />

	<property name="src.dir" value="src/main" />
	<property name="src.js.dir" value="${src.dir}/js" />

	<property name="lib.dir" value="lib" />

	<property name="tools.dir" value="../tools" />

	<property name="doc.dir" value="docs" />
	<property name="xdoc.dir" value="${src.dir}/xdocs" />

	<!-- build properties -->
	<property name="dist.dir" value="target" />
	<property name="dist.docs.dir" value="${dist.dir}/docs" />
	<property name="dist.reports.dir" value="${dist.dir}/reports" />


	<!-- unit tests -->
	<property name="src.test.dir" value="src/test" />
	<property name="src.test.java.dir" value="${src.test.dir}/java" />
	<property name="src.test.js.dir" value="${src.test.dir}/js" />
	<property name="classes.java.dir" value="${dist.dir}/classes" />
	<property name="classes.test.java.dir" value="${dist.dir}/test/classes" />

	<!-- release properties -->
	<property name="release.dir" value="../release" />

	<property name="project.site.dir" value="${basedir}/../log4js-site" />


	<!-- ================================= 
          target: release              
         ================================= -->
	<target name="release" depends="dist" description="--> create release">
		<echo>generate complete distribution archives: ${release.dir}/log4js-${version}.zip</echo>

		<delete dir="${release.dir}" />
		<mkdir dir="${release.dir}" />

		<copy todir="${release.dir}/tmp/log4js-${version}">
			<fileset dir="${basedir}">
				<include name="${src.js.dir}/**" />
				<include name="${example.src.dir}/**" />
			</fileset>

			<fileset dir="${dist.dir}">
				<include name="lib/**" />
				<include name="docs/**" />
			</fileset>

			<fileset file="CHANGELOG.txt" />
			<fileset file="INSTALL.txt" />
			<fileset file="LICENSE.txt" />
			<fileset file="NOTICE.txt" />
		</copy>

		<echo>Copy users guide to archive...</echo>
		<copy todir="${release.dir}/tmp/log4js-${version}/docs">
			<fileset file="${project.site.dir}/build/site/docu/users-guide.pdf" />
		</copy>

		<zip destfile="${release.dir}/log4js-${version}.zip" basedir="${release.dir}/tmp" />

		<tar destfile="${release.dir}/log4js-${version}.tar.gz" basedir="${release.dir}/tmp" compression="gzip" />

		<delete dir="${release.dir}/tmp" />

		<copy todir="${release.dir}">
			<fileset file="${dist.dir}/log4js-doc-${version}.zip">
			</fileset>
		</copy>

		<copy todir="${release.dir}/site">
			<fileset dir="${project.site.dir}/build/site">
			</fileset>
		</copy>
		<copy todir="${release.dir}/site/apidocs">
			<fileset dir="${dist.dir}/docs/api">
			</fileset>
		</copy>
	</target>

	<!-- ================================= 
          target: distribute              
         ================================= -->
	<target name="dist" depends="dist.api, dist.doc" description="--> generate complete distribution">

	</target>


	<!-- ================================= 
          target: dist.api              
         ================================= -->
	<target name="dist.api" depends="init, compile" description="--> distribution archive for API">

	</target>

	<!-- ================================= 
          target: dist.doc              
         ================================= -->
	<target name="dist.doc" depends="init, doc" description="--> generate documentation arcive">
		<echo level="info">Generate documentation archive: ${dist.dir}/log4js-doc-${version}.zip</echo>

		<zip destfile="${dist.dir}/log4js-doc-${version}.zip">
			<fileset dir="${dist.dir}/docs">
			</fileset>
		</zip>
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: compile                      
         - - - - - - - - - - - - - - - - - -->
	<target name="compile" depends="init">
		<mkdir dir="${dist.dir}/lib" />
		<exec executable="perl" output="${dist.dir}/lib/log4js-lib.js" failonerror="false">
			<arg line="-Tw ${tools.dir}/jsjam.pl --quiet --keep-globals --keep-identifiers ${src.js.dir}/log4js.js" />
		</exec>
	</target>

	<!-- ================================= 
          target: doc
          generate documentation
         ================================= -->
	<target name="doc" depends="doc.api" description="generate documentation">
	</target>

	<!-- ================================= 
          target: doc.api              
         ================================= -->
	<target name="doc.api" description="generate the API doc" depends="init">
		<property name="apidoc.dir" value="${dist.dir}/docs/api" />

		<echo level="info">Gererate JSDoc to directory ${apidoc.dir}...</echo>
		<mkdir dir="${apidoc.dir}" />

		<property name="footer" value="Log4js - Logging API for JavaScript" />
		<property name="logo" value="${project.site.dir}/logo/1.0/exports/1.0_70px.jpg" />

		<property name="line" value="${tools.dir}/JSDoc/JSDoc-${tools.jsdoc.version}/jsdoc.pl -r &quot;${basedir}/${src.js.dir}/&quot; -d &quot;${apidoc.dir}&quot; -project-name &quot;${ant.project.name} ${version}&quot; -page-footer &quot;${footer}&quot;  -logo &quot;${logo}&quot;" />
		<echo level="info">${line}</echo>

		<exec executable="perl" errorproperty="jsdoc.failed">
			<arg line="${line}" />
		</exec>
		
		<!--
		Installation
			
			If you get an error message right away that looks something like
			
			                  Can't locate HTML/Template.pm in @INC ......
			                
			
			then you will need to install the HTML::Template Perl module. Luckily, this is a very trivial operation thanks to the CPAN. In a Linux/Unix/POSIX-style operating system, open a terminal and run the following command as root:
			
			                  # perl -MCPAN -e 'install HTML::Template'
			               
			
			If you're running Windows and ActivePerl, open a command prompt window and enter the following command:
			
			                  C:\> ppm
			               
			
			This will start the Perl Package Manager; at the PPM prompt, enter the following two commands (PPM> is the PPM prompt):
			
			                  PPM> install HTML-Template
			                  PPM> quit
			               
			
			JSDoc should run without problems now. 
		-->
	</target>


	<!-- ================================= 
          target: jslint              
         ================================= -->
	<target name="jslint" depends="init" description="--> verify syntax of JavaScripts">
		<exec executable="${basedir}/${tools.dir}/jsl/jsl-${tools.jsl.version}/jsl.exe" resultproperty="${jslint.result}">
			<arg line="conf ${tools.dir}/jsl/jsl.conf process ${src.js.dir}/*.js" />
		</exec>

		<echo message="${jslint.result}" />
	</target>




	<!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="init">
		<mkdir dir="${tools.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: download-dependencies                      
         - - - - - - - - - - - - - - - - - -->
	<target name="download-dependencies" depends="init">
		<setproxy proxyhost="proxy" proxyport="80" />

		<description>
	          To use this Maven-like freedom with respect to dependency setup,
	          do the following:

	          - run ant as you normally would, but add the following target to the command
	            line:

	            download-dependencies

	          For example:
	             C:>myproject\ant download-dependencies dist
		</description>

		<!-- for compression of JavaScript -->
		<get dest="${tools.dir}/jsjam.pl" usetimestamp="true" ignoreerrors="true" src="http://www.anvilon.com/software/download/jsjam" />

		<!-- unit testing -->
		<get dest="${lib.dir}/junit-${tools.junit.version}.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/junit/jars/junit-${tools.junit.version}.jar" verbose="true" />

		<get dest="${lib.dir}/jsunit${tools.jsunit.version}.zip" usetimestamp="true" ignoreerrors="true" src="http://mesh.dl.sourceforge.net/sourceforge/jsunit/jsunit${tools.jsunit.version}.zip" verbose="true" />
		<unzip src="${lib.dir}/jsunit${tools.jsunit.version}.zip" dest="${tools.dir}/JSUnit" />

		<get dest="${lib.dir}/jstester-${tools.jstester.version}.jar" usetimestamp="true" ignoreerrors="true" src="http://switch.dl.sourceforge.net/sourceforge/jstester/jstester-${tools.jstester.version}.jar" verbose="true" />

		<get dest="${lib.dir}/js-${tools.rhino.version}.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/rhino/jars/js-${tools.rhino.version}.jar" verbose="true" />
		<get dest="${lib.dir}/commons-logging-${tools.commons-logging.version}.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-logging/jars/commons-logging-${tools.commons-logging.version}.jar" verbose="true" />


		<!-- for API documentation -->
		<get dest="${lib.dir}/JSDoc-${tools.jsdoc.version}.tgz" usetimestamp="true" ignoreerrors="true" src="http://mesh.dl.sourceforge.net/sourceforge/jsdoc/JSDoc-${tools.jsdoc.version}.tgz" verbose="true" />
		<mkdir dir="${tools.dir}/JSDoc" />
		<untar compression="gzip" src="${lib.dir}/JSDoc-${tools.jsdoc.version}.tgz" dest="${tools.dir}/JSDoc" />

		<!-- install HTML-Template via CPAN -->
		<exec executable="perl">
			<arg line="-MCPAN -e 'install HTML::Template'" />
		</exec>

		<!-- JavaScript Lint -->
		<get dest="${lib.dir}/jsl-${tools.jsl.version}-win32.zip" usetimestamp="true" ignoreerrors="true" src="http://www.javascriptlint.com/download/jsl-${tools.jsl.version}-win32.zip" />
		<unzip src="${lib.dir}/jsl-${tools.jsl.version}-win32.zip" dest="${tools.dir}/jsl" />

	</target>


	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="--> clean the generated files">
		<delete dir="${dist.dir}" />
	</target>



	<!-- ================================= 
          target: compile.test              
         ================================= -->
	<target name="compile.test" depends="init" description="--> compiles test clases">
		<mkdir dir="${classes.test.java.dir}" />
		<javac srcdir="${src.test.java.dir}" destdir="${classes.test.java.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- ================================= 
          target: test              
         ================================= -->
	<target name="test" depends="compile, compile.test, jslint, test.xml" description="--> Unit tests">
		<mkdir dir="${dist.reports.dir}" />

		<junit printsummary="yes">
			<classpath>
				<pathelement location="${dist.dir}" />
				<pathelement path="${dist.dir}/classes" />
				<pathelement path="${classes.test.java.dir}" />
				<pathelement path="${src.js.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<formatter type="xml" />

			<batchtest todir="${dist.reports.dir}">
				<fileset dir="${src.test.java.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- Create html output from the reports -->
		<junitreport todir="${dist.reports.dir}">
			<fileset dir="${dist.reports.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${dist.reports.dir}" />
		</junitreport>
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: test.xml
          Validate the test XML-Messages against the xsd.                   
         - - - - - - - - - - - - - - - - - -->
	<target name="test.xml">
		<pathconvert dirsep="/" property="xsd.file">
			<path>
				<pathelement location="${src.dir}/resources/log4js.xsd" />
			</path>
		</pathconvert>

		<schemavalidate warn="yes" failonerror="no" fullchecking="yes" lenient="yes">
			<schema namespace="http://log4js.berlios.de/2007/log4js/"
		          file="${xsd.file}" />

			<fileset dir="${src.test.dir}/resources/" includes="*.xml" />
		</schemavalidate>

	</target>
</project>